import json,re,time,datetime
import config,markup,functions
from aiogram import Bot, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import Dispatcher
from aiogram.types import InlineKeyboardMarkup,InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters.state import State,StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.types.callback_query import CallbackQuery

bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

class FSMBan(StatesGroup):
	ban_word=State()
	ban_member=State()

@dp.message_handler(commands=['start','help'])
async def start_bot(message : types.Message):
	with open('groups.json', 'r') as open_json:
		chat_info=json.load(open_json)
	if str(message.chat.id) not in chat_info:
		chat_info[str(message.chat.id)]={}
		chat_info[str(message.chat.id)]['delete']=False
		chat_info[str(message.chat.id)]['game']={}
		chat_info[str(message.chat.id)]['main'] = [0,0,[],[]]
	if chat_info[str(message.chat.id)]['delete']:
		await message.delete()
		return
	await bot.send_message(message.chat.id,"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, "+message.from_user.mention+"!\n–Ø –ì—Ä–∞–≥–∞—Å - –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —á–∞—Ç–∞!\n–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã:\n/help - –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∫ —è —Ä–∞–±–æ—Ç–∞—é\n/ban_person - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ 5 –º–∏–Ω—É—Ç\n/ban_word - –∑–∞–ø–µ—Ä—Ç–∏—Ç—å —Å–ª–æ–≤–æ –≤ —á–∞—Ç–µ\n/bet - —Å—ã–≥—Ä–∞—Ç—å –≤ –∫–∞–º–µ–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥–∞")
	with open('groups.json', 'w') as open_json:
		json.dump(chat_info,open_json, indent=4)

@dp.message_handler(commands=['bet'],state=None)
async def open_game(message: types.Message):
	with open('groups.json', 'r') as open_json:
		chat_info=json.load(open_json)
	if chat_info[str(message.chat.id)]['delete']:
		await message.delete()
		return
	chat_info[str(message.chat.id)]['main'][3].clear()
	with open('groups.json', 'w') as open_json:
		json.dump(chat_info,open_json, indent=4)
	await bot.send_message(message.chat.id,"–ö—Ç–æ-—Ç–æ —Å—á–∏—Ç–∞–µ—Ç,—á—Ç–æ –∑–¥–µ—Å—å –Ω–∞–∑—Ä–µ–ª–∞ –¥—É—ç–ª—å?\n–í—ã—Ö–æ–¥–∏—Ç–µ,–±–µ–∑—Å—Ç—Ä–∞—à–Ω—ã–µ!",reply_markup=markup.bet_start)

@dp.message_handler(commands=['ban_word'],state=None)
async def open_banning_word(message: types.Message):
	with open('groups.json', 'r') as open_json:
		chat_info=json.load(open_json)
	if chat_info[str(message.chat.id)]['delete']:
		await message.delete()
		return
	await FSMBan.ban_word.set()
	await bot.send_message(message.chat.id,"–ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ,–∫–æ—Ç–æ—Ä–æ–µ —Å—á–∏—Ç–∞–µ—à—å –Ω–µ–ª–µ–≥–∞–ª—å–Ω—ã–º")

@dp.message_handler(content_types=['text','document','audio','photo','sticker','video','voice','unknown'],state=FSMBan.ban_word)
async def ban_word(message : types.Message, state: FSMContext):
	with open('groups.json', 'r') as open_json:
		chat_info=json.load(open_json)
	chat_info[str(message.chat.id)]['main'][0]=chat_info[str(message.chat.id)]['main'][1]=0
	chat_info[str(message.chat.id)]['main'][3].clear()
	if message.text and message.text.lower() not in chat_info[str(message.chat.id)]['main'][2] and not any((s not in set('—ñ—î—óqwertyuiopasdfghjklzxcvbnm—ë–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é')) for s in message.text.lower()):
		await bot.send_message(message.chat.id,message.text+"\n–î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–ª–µ–≥–∞–ª—å—â–∏–Ω—É?",reply_markup=markup.vote)
		await state.finish()
	else:
		await bot.send_message(message.chat.id,"–î—É—Ä–µ–Ω—å,—ç—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ –≤ –±–∞–Ω–µ –∏–ª–∏ –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –Ω–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –∏–ª–∏ –º–æ–∂–µ—Ç –¥–∞–∂–µ –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç,–ø–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ")
		await message.delete()
	with open('groups.json', 'w') as open_json:
		json.dump(chat_info,open_json, indent=4)

@dp.message_handler(commands=['ban_person'],state=None)
async def open_banning_person(message: types.Message):
	with open('groups.json', 'r') as open_json:
		chat_info=json.load(open_json)
	if chat_info[str(message.chat.id)]['delete']:
		await message.delete()
		return
	await FSMBan.ban_member.set()
	await bot.send_message(message.chat.id,"–û—Ç–º–µ—Ç—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞,–∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –æ—Ö–ª–∞–¥–∏—Ç—å")

@dp.message_handler(content_types=['text','document','audio','photo','sticker','video','voice','unknown'],state=FSMBan.ban_member)
async def ban_person(message : types.Message, state: FSMContext):
	with open('groups.json', 'r') as open_json:
		chat_info=json.load(open_json)
	chat_info[str(message.chat.id)]['main'][0]=chat_info[str(message.chat.id)]['main'][1]=0
	chat_info[str(message.chat.id)]['main'][3].clear()
	if message.reply_to_message and message.reply_to_message.from_user.id!=message.from_user.id and message.reply_to_message.from_user.id!=dict(await bot.get_me())['id'] and not message.reply_to_message.from_user.is_bot and all(i.user.id != message.reply_to_message.from_user.id for i in await bot.get_chat_administrators(message.chat.id)):
		chat_info[str(message.chat.id)]['main'][3].append(message.reply_to_message.from_user.id)
		await bot.send_message(message.chat.id,message.reply_to_message.from_user.mention+"\n–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –Ω–∞ 5 –º–∏–Ω—É—Ç?",reply_markup=markup.vote)
		await state.finish()
	else:
		await bot.send_message(message.chat.id,"–î—É—Ä–µ–Ω—å,–æ—Ç–º–µ—Ç—å –∂–∏–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–∞—Ç–∞(–∞–¥–º–∏–Ω–æ–≤ –∏ —Å–µ–±—è —Ç–æ–∂–µ –Ω–µ–ª—å–∑—è),–ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑")
		await message.delete()
	with open('groups.json', 'w') as open_json:
		json.dump(chat_info,open_json, indent=4)

@dp.message_handler(content_types=['text','document','audio','photo','sticker','video','voice','unknown'])
async def check_swearings(message : types.Message):
	with open('groups.json', 'r') as open_json:
		chat_info=json.load(open_json)
	if chat_info[str(message.chat.id)]['delete']:
		await message.delete()
		return
	if message.text and any((word in re.split(r'[ ,!/_?.	\n-]+',message.text.lower())) for word in chat_info[str(message.chat.id)]['main'][2]):
		await message.reply(message.from_user.full_name+" ,—Ç–æ–±–æ–π –±—ã–ª–æ –ø—Ä–æ–∏–∑–Ω–µ—Å–µ–Ω–æ —Ç–æ,—á—Ç–æ –Ω–µ–ª—å–∑—è –±—ã–ª–æ –≥–æ–≤–æ—Ä–∏—Ç—å")
		await message.delete()

@dp.callback_query_handler(text="pros")
async def vote_for_ban(call: CallbackQuery):
	with open('groups.json', 'r') as open_json:
		chat_info=json.load(open_json)
	if chat_info[str(call.message.chat.id)]['delete'] or call.from_user.id in chat_info[str(call.message.chat.id)]['main'][3]:
		return
	chat_info[str(call.message.chat.id)]['main'][0]+=1
	pros=types.InlineKeyboardButton(text="üëç "+str(chat_info[str(call.message.chat.id)]['main'][0]),callback_data="pros")
	cons=types.InlineKeyboardButton(text="üëé "+str(chat_info[str(call.message.chat.id)]['main'][1]),callback_data="cons")
	chat_info[str(call.message.chat.id)]['main'][3].append(call.from_user.id)
	await call.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(row_width=2).add(pros,cons))
	if chat_info[str(call.message.chat.id)]['main'][0] > (await call.message.chat.get_member_count()-1)/2:
		if call.message.text.split('\n')[1][0]=='–î':
			chat_info[str(call.message.chat.id)]['main'][2].append(call.message.text.split('\n')[0].lower())
		elif call.message.text.split('\n')[1][0]=='–û':
			await bot.restrict_chat_member(call.message.chat.id,chat_info[str(call.message.chat.id)]['main'][3][0],types.ChatPermissions(),datetime.timedelta(minutes=5))
		await call.message.delete()
		await bot.send_message(call.message.chat.id,"–°—É–¥ –æ–∫–æ–Ω—á–µ–Ω –±–∞–Ω–æ–º!")
	with open('groups.json', 'w') as open_json:
		json.dump(chat_info,open_json, indent=4)

@dp.callback_query_handler(text="cons")
async def vote_against_ban(call: CallbackQuery):
	with open('groups.json', 'r') as open_json:
		chat_info=json.load(open_json)
	if chat_info[str(call.message.chat.id)]['delete'] or call.from_user.id in chat_info[str(call.message.chat.id)]['main'][3]:
		return
	chat_info[str(call.message.chat.id)]['main'][1]+=1
	pros=types.InlineKeyboardButton(text="üëç "+str(chat_info[str(call.message.chat.id)]['main'][0]),callback_data="pros")
	cons=types.InlineKeyboardButton(text="üëé "+str(chat_info[str(call.message.chat.id)]['main'][1]),callback_data="cons")
	chat_info[str(call.message.chat.id)]['main'][3].append(call.from_user.id)
	await call.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(row_width=2).add(pros,cons))
	if chat_info[str(call.message.chat.id)]['main'][1] >= (await call.message.chat.get_member_count()-1)/2:
		await call.message.delete()
		await bot.send_message(call.message.chat.id,"–°—É–¥ –æ–∫–æ–Ω—á–µ–Ω –ø—Ä–æ—â–µ–Ω—å–µ–º!")
	with open('groups.json', 'w') as open_json:
		json.dump(chat_info,open_json, indent=4)

@dp.callback_query_handler(text="try")
async def enter_game(call: CallbackQuery):
	with open('groups.json', 'r') as open_json:
		chat_info=json.load(open_json)
	if chat_info[str(call.message.chat.id)]['delete'] or call.from_user.id in chat_info[str(call.message.chat.id)]['main'][3]:
		return
	chat_info[str(call.message.chat.id)]['main'][3].append(call.from_user.id)
	if(len(chat_info[str(call.message.chat.id)]['main'][3])==1):
		await call.message.edit_text(call.from_user.mention+"-–∂–¥—ë—Ç —Å–≤–æ–µ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞",reply_markup=markup.bet_start)
	if(len(chat_info[str(call.message.chat.id)]['main'][3])==2):
		await call.message.edit_text("–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!",reply_markup=None)
		time.sleep(3)
		chat_info[str(call.message.chat.id)]['delete']=True
		await bot.send_message(call.message.chat.id,dict(await call.message.chat.get_member(chat_info
			[str(call.message.chat.id)]['main'][3][0]))['user']['first_name']+' ,'+dict(await call.message.chat.get_member(chat_info
			[str(call.message.chat.id)]['main'][3][1]))['user']['first_name']+", –≤—ã–±–∏—Ä–∞–π—Ç–µ –æ—Ä—É–∂–∏–µ;",reply_markup=markup.game)
	with open('groups.json', 'w') as open_json:
		json.dump(chat_info,open_json, indent=4)

@dp.callback_query_handler(text=['–ù–æ–∂–Ω–∏—Ü—ã','–ö–∞–º–µ–Ω—å','–ë—É–º–∞–≥–∞'])
async def choose_weapon(call: CallbackQuery):
	with open('groups.json', 'r') as open_json:
		chat_info=json.load(open_json)
	if str(call.from_user.id) not in chat_info[str(call.message.chat.id)]['game'] and call.from_user.id in chat_info[str(call.message.chat.id)]['main'][3]:
		chat_info[str(call.message.chat.id)]['game'][str(call.from_user.id)]=call.data
	if len(chat_info[str(call.message.chat.id)]['game'])==2:
		result=functions.check_winner(call.message.chat.id,chat_info[str(call.message.chat.id)]['main'][3],chat_info)
		await call.message.delete()
		if not result:
			await bot.send_message(call.message.chat.id,"–ù–∏—á—å—è!\n–ù–æ–≤—ã–π —Ä–∞—É–Ω–¥:",reply_markup=markup.game)
		else:
			await bot.send_message(call.message.chat.id,'–î–ª—è '+dict(await call.message.chat.get_member(result[0]))['user']['first_name']+" –±—ã–ª–æ –ø—Ä–æ—Å—Ç–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–±–µ–¥—É!\n"+chat_info[str(call.message.chat.id)]['game'][str(result[0])]+" —Å–∏–ª—å–Ω–µ–µ —á–µ–º "+chat_info[str(call.message.chat.id)]['game'][str(result[1])])
			chat_info[str(call.message.chat.id)]['delete']=False
		chat_info[str(call.message.chat.id)]['game'].clear()
	with open('groups.json', 'w') as open_json:
		json.dump(chat_info,open_json, indent=4)
#–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–¥–º–∏–Ω–∫—É –±–æ—Ç–∞ –∏ —Ç–∏–ø —á–∞—Ç–∞(–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ-—Ü–∏–∏ —Å—Ç–æ–∏—Ç –∑–∞–ø—Ä–µ—Ç–∏—Ç—å) 
#–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –≤ –≥—Ä—É–ø–ø–µ(–º–∏–Ω–∏–º—É–º 3) –∏ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —Å—Ç–æ–ø

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)